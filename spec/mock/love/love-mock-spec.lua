describe('love-mock', function()
    setup(function()
        _G.class = require 'lib/middleclass'
        _G.love = require("spec/unpack/love-mock")
    end)

    teardown(function()
    end)

    it('should exist', function()
        assert.truthy(love)
    end)
    it('should have a physics table', function()
        assert.truthy(love.physics)
        assert.equal(type(love.physics), 'table')
    end)

    describe('physics', function()
        it('should have a newBody method', function()
            assert.truthy(love.physics.newBody)
            assert.truthy(love.physics.newBody.new)
            assert.equal(type(love.physics.newBody.new), 'function')
        end)
        it('should have a newFixture method', function()
            assert.truthy(love.physics.newFixture)
            assert.truthy(love.physics.newFixture.new)
            assert.equal(type(love.physics.newFixture.new), 'function')
        end)

        describe('body', function()
            local body

            before_each(function()
                body = love.physics.newBody()
            end)

            it('should exist once created', function()
                assert.truthy(body)
            end)

            describe('properties', function()

                it('should have x', function()
                    assert.truthy(body.x)
                    assert.equal(type(body.x), 'number')
                end)
                it('should have y', function()
                    assert.truthy(body.y)
                    assert.equal(type(body.y), 'number')
                end)
                it('should have xSpeed', function()
                    assert.truthy(body.xSpeed)
                    assert.equal(type(body.xSpeed), 'number')
                end)
                it('should have ySpeed', function()
                    assert.truthy(body.ySpeed)
                    assert.equal(type(body.ySpeed), 'number')
                end)
            end)

            describe('getX', function()
                it('should exist', function()
                    assert.truthy(body.getX)
                end)
                it('should return x', function()
                    assert.equal(body:getX(), body.x)
                    body.x = 12
                    assert.equal(body:getX(), body.x)
                end)
            end)

            describe('getY', function()
                it('should exist', function()
                    assert.truthy(body.getY)
                end)
                it('should return y', function()
                    assert.equal(body:getY(), body.y)
                    body.y = 12
                    assert.equal(body:getY(), body.y)
                end)
            end)

            describe('setX', function()
                it('should exist', function()
                    assert.truthy(body.setX)
                end)
                it('should set x', function()
                    body:setX(12)
                    assert.equal(body:getX(), 12)
                    body:setX(1)
                    assert.equal(body:getX(), 1)
                    body:setX(0)
                    assert.equal(body:getX(), 0)
                end)
            end)

            describe('setY', function()
                it('should exist', function()
                    assert.truthy(body.setY)
                end)
                it('should set y', function()
                    body:setY(12)
                    assert.equal(body:getY(), 12)
                    body:setY(1)
                    assert.equal(body:getY(), 1)
                    body:setY(0)
                    assert.equal(body:getY(), 0)
                end)
            end)

            describe('getLinearVelocity', function()
                it('should exist', function()
                    assert.truthy(body.getLinearVelocity)
                end)
                it('should return xSpeed, ySpeed', function()
                    local xSpeed, ySpeed = body:getLinearVelocity()
                    assert.equal(xSpeed, body.xSpeed)
                    assert.equal(ySpeed, body.ySpeed)
                    body.xSpeed = 12
                    body.ySpeed = 12
                    xSpeed, ySpeed = body:getLinearVelocity()
                    assert.equal(xSpeed, body.xSpeed)
                    assert.equal(ySpeed, body.ySpeed)
                end)
            end)

            describe('setLinearVelocity', function()
                it('should exist', function()
                    assert.truthy(body.setLinearVelocity)
                end)
                it('should set xSpeed, ySpeed', function()
                    body:setLinearVelocity(12, 13)
                    assert.equal(body.xSpeed, 12)
                    assert.equal(body.ySpeed, 13)
                    body:setLinearVelocity(1, 0)
                    assert.equal(body.xSpeed, 1)
                    assert.equal(body.ySpeed, 0)
                    body:setLinearVelocity(100, 1500)
                    assert.equal(body.xSpeed, 100)
                    assert.equal(body.ySpeed, 1500)
                end)
            end)
        end)
        
        describe('fixture', function()
            local fixture

            before_each(function()
                fixture = love.physics.newFixture(love.physics.newBody(),{})
            end)

            it('should exist once created', function()
                assert.truthy(fixture)
            end)

            describe('properties', function()
                it('should have a body', function()
                    assert.truthy(fixture.body)
                end)

                it('should have a shape', function()
                    assert.truthy(fixture.shape)
                end)
            end)

            describe('getUserData', function()
                it('should exist', function()
                    assert.truthy(fixture.getUserData)
                end)
                it('should return userData', function()
                    fixture.userData = 12
                    assert.equal(fixture:getUserData(), fixture.userData)
                    fixture.userData = 13
                    assert.equal(fixture:getUserData(), fixture.userData)
                end)
            end)

            describe('setUserData', function()
                it('should exist', function()
                    assert.truthy(fixture.setUserData)
                end)
                it('should set userData', function()
                    fixture:setUserData(12)
                    assert.equal(fixture:getUserData(), 12)
                    fixture:setUserData(1)
                    assert.equal(fixture:getUserData(), 1)
                    fixture:setUserData(0)
                    assert.equal(fixture:getUserData(), 0)
                end)
            end)
        end)
    end)
end)
